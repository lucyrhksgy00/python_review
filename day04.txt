Day04

1. 제어문 (Cont'd)
(2) 반복문 (loop, iteration, 뺑뺑이)
    - 어떤 작업을 한 번 이상 반복해서 수행
    - 동일 작업을 반복해야 하는데, 코딩은 여러 줄 하고 싶지 않을 때
    - while, for   cf) C, Java : do ~ while

    1) while
       - 특정 조건을 만족하는 동안 반복해서 수행 (보통 제한이 없을 때 사용)

       * 형태
       while 조건식 (True/False로 답이 나오는 식):
           조건식이 True인 동안 실행할 문장

       * 사례
       i = 0
       while i < 10:
           print(i)
           i = i + 1   # 빼먹으면 영원히 탈출 불가

       * 참고
       while True:
           수행할 일
           if 탈출 조건:
               break   # 기타 제어문

    2) for
       - 범위나 회수가 정해져 있는 동안 반복해서 수행

       * 형태
       for 변수 in 집합 (떼거지) :
           반복해서 실행할 문장

       * 사례
       for n in [1, 2, 3]:   # list
           print(n)

       for n in [1, 26, 188]:   # while로는 불가능!
           print(n)

       * 참고
       집합 (떼거지) : 문자열 (str), 리스트 (list), 튜플 (tuple)
                     세트 (set), 레인지 (range), 딕셔너리 (dict)

       for s in "문자열집합":   # str
           print(s)   # "문", "자", "열", "집", "합"; 한 글자씩 출력

       for l in ['1', '2', '3']:   # list : [ ]로 묶여있음
           print(l)

       v4 = ('Spring', 'Summer', 'Fall', "Winter")   # tuple : ( )로 묶여있으며 수정이 불가능함, 대신 리스트보다 속도가 빠름
       for season in v4:
           print(season)

       v4 = {'Spring', 'Summer', 'Fall', 'Winter'}   # set (집합) : { }로 묶여있음, 정해진 순서 없음
       for season in v4:
           print(season)

       **** 중요해서 어떤 말로도 설명 부족 > range ****
       range(초기값, 종료값, 증감값)
       - 초기값부터 종료값까지 증감값만큼 차이를 갖는 그룹
       - 초기값을 생략하면 0, 종료값을 생략하면 오류남, 증감값을 생략하면 1
       - range(1, 5, 1) -> 1, 2, 3, 4   # 종료값은 절대 출력에 포함되지 않음
         range(1, 5, 2) -> 1, 3
         range(5) -> 0, 1, 2, 3, 4   # 5개라고 생각하면 쉬움, loop 돌릴 때 사용

       **** 초고난이도 dict ****
       - 최근 많이 쓰이는 자료구조형 key, value로 저장   cf) REST API (통신 방식 중 하나)
       person = {'name':'py', 'age':100}   # set와 같이 { }로 묶임, 정해진 순서 없음
       person = {'name':'py', 'age':100, 'age':1000}   # value는 'age':1000만 나옴; 중복되는 key는 없앰 (set와 같이 overwrite)
       for item in person:
           print(item)   # key만 나옴: 'name', 'age'
           print(person[item])   # item 출력 방법 1 : 해당 key가 없으면 오류 출력
           print(person.get(item))   # item 출력 방법 2 (추천) : 해당 key가 없으면 none이라고 출력