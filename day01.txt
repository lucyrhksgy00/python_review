Day01

1. 식별자 이름규칙 (코딩 - 변수명, 환경설정)
    - 한글,특수기호 xxx
    - 띄어쓰기 xxx -> _
    - 영어+숫자 O
    - 숫자시작 xxx
    - avgScore 카멜 표기법
    - avg_score <<

2. 파이썬 설치완료!
    - SEARCH에서 IDLE 검색 -> launch python
    - OPTIONS -> CONFIGURE IDLE에서 창 사이즈 변경 가능
    - (ex) 파이참, 아나콘다, ... -> "개발도구"
        - 더 편하게 코딩하게 도와줌

3. 인터프리터 언어 <-> 컴파일 언어
    - 채팅형 언어
        - 번역을 하지 않아도 바로 알아들음
        - 별도의 컴파일이 필요 없음
    - line by line (응답이 바로 옴)
    - 컴파일이란?
        - 컴퓨터: 0, 1로 이루어져 있는 머신
        - 01011111010100111 -> 이런 식으로 얘기를 해야함
        - 대표적인 컴파일 언어 (C, java)
            - (ex) C: int num = 10;
                - C를 해석해서 0, 1로 번역
            - (ex) Java: Car car = new Car();
                - Java를 해석해서 0, 1로 번역
            - 컴퓨터는 0, 1이 아니면 못 알아들음!
            - 컴파일러가 컴파일을 해줌! (= 번역가가 번역을 해줌!)
            - "빌드"한다

4. C 언어, JAVA, 파이썬
    - C 언어: 메모리, 변수, 로직 (알고리즘), ...
    - JAVA: 국비 -> 웹 개발/취업 유리
    - 파이썬: AI, 인공지능, 머신러닝, 빅데이터, ...
        - 코드 공유/교류하기에 최적화 -> 확장성이 좋음 (기능 많음)

5. 연산자 -> "연산자 우선순위"
    - 산술 연산자
        - **: 제곱
        - //: 몫
        - %: 나머지
    - 대입 연산자
        - 오른쪽에 위치한 값을 왼쪽에 위치한 변수에 대입하는 연산자
        - (ex) num = 3
            - 변수명 = 값
        - (ex) 3 = num
            - SyntaxError
            - 문법 에러! (변수를 왼쪽에 쓰지 않아 생긴 문제)
        - (ex) x
            - NameError
            - 이름 에러! (정의하지 않고 x를 사용하여 생긴 문제)
        - 대입 연산자 면접 예시
            - 123 = num이 안되는 이유를 설명하시오.
                - 123이라는 변수명을 만들지 않았음
                - 123을 변수명으로 지을 수 없음 (식별자 이름 규칙 참고)
                - 변수명을 숫자에 대입하려고 함
                - 방향성이 분명한 연산자 --> 문법에 맞게 써야함
    - 복합대입연산자 (기존 연산자의 사용 횟수를 줄여주어 효율성 증가)
        - total = total + 계산할 금액
        - total + 계산할 금액을 한 후 total에 다시 대입하는 중
            - 비효율적!
        - 대입 연산자(=)만 사용하면 마지막 정한/저장한 값만 나옴
        - total+=계산할 금액
            - 효율적!
        - 기본 산술 연산자와 함께 사용 가능!
            - (ex) -=
    - 비교연산자 (컴퓨터한테 질문/크기 비교를 요청 -> 답변)
        - > < >= <= == != (=는 항상 뒤에)
        - (ex) -2 = -2 (대입 연산자: -2를 -2에 넣어주세요)
            - SyntaxError
        - a == b: a의 값과 b의 값이 같니?
        - a != b: a의 값과 b의 값이 다르니?
            - ! NOT 부정
    - 논리연산자 (뜻 기억하기!)
        - AND OR NOT (소문자)
        - AND: ~이면서, ~하면서, 동시에, 그리고, ...
        - OR: 또는, 혹은, ~이거나, ...
        - NOT: 부정
        - (ex) 15세 이하이거나 60세 이상인 경우는 무료다.
            - age <= 15 OR age >= 60
        - (ex) 생일이 5~9월 사이인 사람들은 입장이 가능하다.
            - 5 이상이면서 9 이하
            - month >= 5 AND month <= 9
            - 5 <= month AND month <= 9 (읽기 쉬움)
        - (ex) 학번이 짝수이거나 남자인 경우는 참여 가능하다.
            - snum%2 == 0 OR gender == '남자'
            - snum을 2로 나누었을 때 나머지가 0과 같니?
            - snum이 짝수니?
6. 변수
    - 값을 저장하는 공간
    - "재사용"하려고
    - 자료형 (data type)
        - int 정수 (ex) 10
        - float 실수 (ex) 3.14
        - str 문자열 (ex) '사과'
        - bool 진위형 (ex) True, False
    - 동적 타이핑 (dynamic typing)
    <-> 정적 (static): 프로그램 시작 전에 결정되어야 하는 상황 ("빌드"를 할 때 정해야함)
        - 자료형은 분명히 구분하는 것이 (기초일 때) 중요!
        - 괄호와 연산자의 우선 순위 잊지 않기!
            - 실수 아닌 실력임
        - avgScore: 카멜 표기법
            - 평균과 점수를 구분하기 위하여 S 대문자로
        - avg_score로도 표기 가능
    - 마지막 예시 설명
        1) 영어와 숫자로 이루어진 합리적인 이름을 가진 변수명을 정함
            - student1, student2, student3
        2) 데이터를 2번 이상 쓸 생각이 있기 때문에 대입 연산자를 사용하여 변수를 만듦
        3) 언더바를 사용해 변수명을 정하고 연산자를 "연산자 우선순위"를 고려하여 사용해 학생들의 평균 점수를 구했음
        4) 옳은 답을 도출함